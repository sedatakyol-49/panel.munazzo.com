{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/add/observable/throw.js","webpack:///./src/app/core/commonservices/services.ts","webpack:///./src/app/core/data/PlatformSettings.ts","webpack:///./src/app/core/data/global.ts","webpack:///./src/app/widgets/platformsetting/platformsettings.service.ts"],"names":[],"mappings":"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","file":"widgets-modules-accountplatform-module~widgets-modules-platformsettings-module.js","sourcesContent":["import { Observable, throwError as staticThrowError } from 'rxjs';\nObservable.throw = staticThrowError;\nObservable.throwError = staticThrowError;\n//# sourceMappingURL=throw.js.map","import { Injectable, Inject, DoCheck } from '@angular/core';\r\nimport { Http, Response, RequestOptions, Headers } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Router } from '@angular/router';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\nimport { Platform } from '../data/Platform';\r\nimport { Plugin } from '../data/Plugin';\r\nimport { AccountPlatform } from '../data/AccountPlatform';\r\nimport { FilterCondition } from '../data/FilterCondition';\r\nimport { FilterType } from '../data/FilterType';\r\nimport { Account } from '../data/Acount';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class Services implements DoCheck {\r\n\r\n    myAppUrl: string = \"\";\r\n    constructor(private _http: Http, @Inject('baseUrl') baseUrl: string) {\r\n        this.myAppUrl = baseUrl;\r\n    }\r\n\r\n    ngDoCheck() {\r\n        this.getAllAccountPlatform();\r\n        this.getAllPlatform();\r\n        this.getAllPlugin();\r\n        this.getFilterCondition();\r\n        this.getFilterType();\r\n    }\r\n\r\n    private headers = new Headers(\r\n        {\r\n            'Content-Type': 'application/json',\r\n            'X-MKC-Auth': 'test',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Credentials': 'true',\r\n            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, PATCH, DELETE',\r\n            \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\r\n        }\r\n    );\r\n\r\n        //get all accountplatform\r\n        getAllAccount(): Observable<Account[]> {\r\n            let url: string = this.myAppUrl + \"account/getall\";\r\n           // let localUrl=\"http://localhost:51462/account/getall\";\r\n            let header=new Headers();\r\n            header.append('Content-Type', 'application/json');\r\n            var requestOptions = new RequestOptions({ headers: header });\r\n            return this._http.get(url, requestOptions)\r\n                .map(res => res.json())\r\n                .map(res => {\r\n                    if (res) {\r\n                    }\r\n                    return res;\r\n                })\r\n                .catch(this.errorHandler);\r\n        }\r\n\r\n    //get all accountplatform\r\n    getAllAccountPlatform(): Observable<AccountPlatform[]> {\r\n        let url: string = this.myAppUrl + \"accountplatform/getall\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.get(url, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n    //get all platform\r\n    getAllPlatform(): Observable<Platform[]> {\r\n        let url: string = this.myAppUrl + \"platform/getall\";\r\n        return this._http.get(url)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //get all plugin\r\n    getAllPlugin(): Observable<Plugin[]> {\r\n        let url: string = this.myAppUrl + \"plugin/getall\";\r\n        return this._http.get(url)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    getFilterCondition():Observable<FilterCondition[]>{\r\n        let url: string = this.myAppUrl + \"enumeration/filtercondition\";\r\n        return this._http.get(url)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    getFilterType():Observable<FilterType[]>{\r\n        let url: string = this.myAppUrl + \"enumeration/filtertype\";\r\n        return this._http.get(url)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    extractData(res: Response) {\r\n        let body = res.json();\r\n        return body;\r\n    }\r\n\r\n    errorHandler(error: Response) {\r\n        console.log(error);\r\n        return Observable.throw(error);\r\n    }\r\n}","export class Platformsettings{\r\n    ID:number;\r\n    AccountPlatformID:number;\r\n    Value:string;\r\n    Key:string;\r\n    Deleted:boolean;\r\n    CreatedOn:string;\r\n    UpdatedOn:string;\r\n    }","export class MyGlobal {\r\n    userToken: string;\r\n    accountID:number;\r\n    accountUsername:string;\r\n  }","import { Injectable, Inject } from '@angular/core';\r\nimport { Http, Response, RequestOptions, Headers } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Router } from '@angular/router';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\nimport { Platformsettings } from '../../core/data/PlatformSettings';\r\nimport { AccountPlatform } from '../../core/data/AccountPlatform';\r\nimport { ReturnStatement } from '@angular/compiler';\r\nimport { List } from 'lodash';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class PlatformsettingsService {\r\n    private headers = new Headers(\r\n        {\r\n            'Content-Type': 'application/json',\r\n            'X-MKC-Auth': 'test',\r\n        }\r\n    );\r\n    myAppUrl: string = \"\";\r\n    constructor(private _http: Http, @Inject('baseUrl') baseUrl: string) {\r\n        this.myAppUrl = baseUrl;\r\n    }\r\n    //get all platformsettings\r\n    getAllPlatformsettings(AccountPlatformID: number): Observable<any[]> {\r\n        let url: string = this.myAppUrl + \"platformsettings/\" + AccountPlatformID + \"/getall\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.get(url, { headers: this.headers })\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //get all default platformsettings\r\n    getPlatformsettingByDefault(accountPlatformID: number): Observable<any> {\r\n        let url: string = this.myAppUrl + \"platformsettings/\" + accountPlatformID + \"/getdefault\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.get(url, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n\r\n    }\r\n\r\n    //Create platformsettings\r\n    createPlatformsettings(platformsettings: Platformsettings): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"platformsettings/create\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.post(url, platformsettings, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //Update platformsettings\r\n    updatePlatformsettings(platformsettings: Platformsettings): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"platformsettings/update\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.post(url, platformsettings, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //Delete platformsettings\t\r\n    deletePlatformsettingsById(platformsettings: Platformsettings): Observable<boolean> {\r\n        // let url: string = this.myAppUrl + \"platformsettings/\"+ AccountPlatformID+\"/getdefault\";\r\n\r\n        let url: string = this.myAppUrl + \"platformsettings/\" + platformsettings.ID + \"/delete\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.delete(url, { headers: this.headers })\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    extractData(res: Response) {\r\n        let body = res.json();\r\n        return body;\r\n    }\r\n\r\n    errorHandler(error: Response) {\r\n        console.log(error);\r\n        return Observable.throw(error);\r\n    }\r\n\r\n}"],"sourceRoot":""}