{"version":3,"sources":["webpack:///./src/app/core/data/AccountPlatform.ts","webpack:///./src/app/core/data/integrationfilter.ts","webpack:///./src/app/widgets/accountplatform/accountplatform-routing.ts","webpack:///./src/app/widgets/accountplatform/accountplatform.component.html","webpack:///./src/app/widgets/accountplatform/accountplatform.component.ts","webpack:///./src/app/widgets/accountplatform/accountplatform.service.ts","webpack:///./src/app/widgets/integrationfilters/integrationfilter.service.ts","webpack:///./src/app/widgets/modules/accountplatform.module.ts"],"names":[],"mappings":"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","file":"widgets-modules-accountplatform-module.js","sourcesContent":["export class AccountPlatform{\r\nID:number;\r\nAccountID:number;\r\nPlatformID:number;\r\nPluginID:number;\r\nType:string;\r\nKey:string;\r\nIsActive:boolean;\r\n}","export class IntegrationFilter{\r\n    ID:number;\r\n    AccountPlatformID:number;\r\n    key: string;\r\n    FilterType: string;\r\n    Result: string;\r\n    Value: string;\r\n    FilterCondition:string;\r\n}","/**\r\n * Created by mohma on 7/26/2017.\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport{Routes,RouterModule} from '@angular/router';\r\nimport { AccountPlatformWidgetComponent } from './accountplatform.component';\r\n\r\nconst routes:Routes=[\r\n    {\r\n        path:'',\r\n        component:AccountPlatformWidgetComponent,\r\n        data:{\r\n            title:'data'\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports:[RouterModule.forChild(routes)],\r\n    exports:[RouterModule]\r\n})\r\nexport class AccountPlatformWidgetRoutingModule{}","module.exports = \"<!-- List of AccountPlatform-->\\r\\n<div class=\\\"col-md-12\\\">\\r\\n  <h3 style=\\\"text-align: center\\\">Account Platforms</h3>\\r\\n  <table class=\\\"table table-bordered table-striped table-hover\\\">\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th class=\\\"text-center\\\">ID</th>\\r\\n        <th class=\\\"text-center\\\">Type</th>\\r\\n        <th class=\\\"text-center\\\">Key</th>\\r\\n        <th class=\\\"text-center\\\">IsActive</th>\\r\\n        <th>&nbsp;</th>\\r\\n        <th>&nbsp;</th>\\r\\n        <th>&nbsp;</th>\\r\\n        <th>&nbsp;</th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let accountplatform of accountplatforms\\\">\\r\\n        <td>{{accountplatform.ID}}</td>\\r\\n        <td>{{accountplatform.Type}}</td>\\r\\n        <td>{{accountplatform.Key}}</td>\\r\\n        <td>{{accountplatform.IsActive}}</td>\\r\\n        <td>\\r\\n          <button mat-flat-button color=\\\"accent\\\" (click)=\\\"showEditAccountPlatformForm(accountplatform)\\\">\\r\\n            <i class=\\\"fa fa-edit\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td>\\r\\n          <button mat-flat-button color color=\\\"warn\\\" (click)=\\\"removeAccountPlatform(accountplatform)\\\">\\r\\n            <i class=\\\"fa fa-minus\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td>\\r\\n          <button mat-flat-button color=\\\"primary\\\" (click)=\\\"goPlatformSettings(accountplatform)\\\">Go to Platformsettings\\r\\n            <i class=\\\"fa fa-angle-double-right\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td>\\r\\n          <button mat-flat-button color=\\\"primary\\\" (click)=\\\"goIntegrationFilters(accountplatform)\\\">Go to IntegrationFilters\\r\\n            <i class=\\\"fa fa-angle-double-right\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <button class=\\\"btn btn-success\\\" (click)=\\\"showAddAccountPlatformForm()\\\">\\r\\n    <i class=\\\"fa fa-plus\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<!-- Create AccountPlatform -->\\r\\n<div *ngIf=\\\"accounPlatformForm\\\" class=\\\"col-md-12\\\">\\r\\n  <h3 style=\\\"text-align:center\\\">Add(Accountplatform)</h3>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form #accountPlatForm=\\\"ngForm\\\" (ngSubmit)=\\\"accountPlatForm.form.valid && onSubmit(accountPlatForm)\\\" id=\\\"form\\\" novalidate>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Platform Description</label>\\r\\n          <select id=\\\"platformID\\\" ngModel class=\\\"form-control\\\" name=\\\"PlatformID\\\" [(ngModel)]=\\\"newAccountPlatform.PlatformID\\\" required\\r\\n            #PlatformID=\\\"ngModel\\\">\\r\\n            <option [ngValue]=\\\"platform.ID\\\" *ngFor=\\\"let platform of platforms\\\">{{platform.Description}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"accountPlatForm.submitted && PlatformID.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"PlatformID.errors.required\\\" class=\\\"alert alert-danger\\\">PlatformID is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Plugin Title</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"PluginID\\\" [(ngModel)]=\\\"newAccountPlatform.PluginID\\\" required #PluginID=\\\"ngModel\\\">\\r\\n            <option [ngValue]=\\\"plugin.ID\\\" *ngFor=\\\"let plugin of plugins\\\">{{plugin.Title}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"accountPlatForm.submitted && PluginID.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"PluginID.errors.required\\\" class=\\\"alert alert-danger\\\">PluginID is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Type</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newAccountPlatform.Type\\\" required minlength=\\\"5\\\" maxlength=\\\"100\\\"\\r\\n            name=\\\"Type\\\" #Type=\\\"ngModel\\\" />\\r\\n          <div *ngIf=\\\"accountPlatForm.submitted && Type.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Type.errors.required\\\" class=\\\"alert alert-danger\\\">Type is required</div>\\r\\n            <div *ngIf=\\\"Type.errors.minlength\\\" class=\\\"alert alert-danger\\\">Type must be at least 5 characters</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Key</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newAccountPlatform.Key\\\" required minlength=\\\"5\\\" maxlength=\\\"100\\\"\\r\\n            name=\\\"Key\\\" #Key=\\\"ngModel\\\" />\\r\\n          <div *ngIf=\\\"accountPlatForm.submitted && Key.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Key.errors.required\\\" class=\\\"alert alert-danger\\\">Key is required</div>\\r\\n            <div *ngIf=\\\"Key.errors.minlength\\\" class=\\\"alert alert-danger\\\">Key must be at least 5 characters</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"checkbox\\\">\\r\\n          <mat-checkbox [(ngModel)]=\\\"newAccountPlatform.IsActive\\\" ngModel name=\\\"IsActive\\\" (change)=\\\"isIndeterminate = false\\\" [indeterminate]=\\\"isIndeterminate\\\"\\r\\n            [disabled]=\\\"isDisabled\\\" [labelPosition]=\\\"labelPosition\\\">IsActive\\r\\n          </mat-checkbox>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <button mat-flat-button color=\\\"primary\\\" type=\\\"submit\\\">Save</button>\\r\\n          <button mat-flat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"cancelNewAccountPlatform()\\\">Cancel</button>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- Edit AccountPlatform -->\\r\\n<div *ngIf=\\\"editAcountPlatformForm\\\" class=\\\"col-md-12\\\">\\r\\n  <h3 style=\\\"text-align: center\\\">Edit(Accountplatform)</h3>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form #editedAccountPlatForm=\\\"ngForm\\\" (ngSubmit)=\\\"editedAccountPlatForm.form.valid && onSubmitUpdate(editedAccountPlatForm)\\\"\\r\\n        id=\\\"form\\\">\\r\\n        <div [style.visibility]=\\\"'hidden'\\\">\\r\\n          <label class=\\\"col-md-4\\\">ID</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"editedAccountPlatform.ID\\\" name=\\\"ID\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Platform Description</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"PlatformID\\\" [(ngModel)]=\\\"editedAccountPlatform.PlatformID\\\" #PlatformID=\\\"ngModel\\\"\\r\\n            required>\\r\\n            <option [ngValue]=\\\"platform.ID\\\" *ngFor=\\\"let platform of platforms\\\">{{platform.Description}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"editedAccountPlatForm.submitted && PlatformID.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"PlatformID.errors.required\\\" class=\\\"alert alert-danger\\\">PlatformID is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Plugin Title</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"PluginID\\\" [(ngModel)]=\\\"editedAccountPlatform.PluginID\\\" required #PluginID=\\\"ngModel\\\">\\r\\n            <option [ngValue]=\\\"plugin.ID\\\" *ngFor=\\\"let plugin of plugins\\\">{{plugin.Title}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"editedAccountPlatForm.submitted && PluginID.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"PluginID.errors.required\\\" class=\\\"alert alert-danger\\\">PluginID is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Type</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"editedAccountPlatform.Type\\\" required minlength=\\\"5\\\" maxlength=\\\"100\\\"\\r\\n            name=\\\"Type\\\" #Type=\\\"ngModel\\\" />\\r\\n          <div *ngIf=\\\"editedAccountPlatForm.submitted && Type.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Type.errors.required\\\" class=\\\"alert alert-danger\\\">Type is required</div>\\r\\n            <div *ngIf=\\\"Type.errors.minlength\\\" class=\\\"alert alert-danger\\\">Type must be at least 5 characters</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Key</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"editedAccountPlatform.Key\\\" required minlength=\\\"5\\\" maxlength=\\\"100\\\"\\r\\n            name=\\\"Key\\\" #Key=\\\"ngModel\\\" />\\r\\n          <div *ngIf=\\\"editedAccountPlatForm.submitted && Key.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Key.errors.required\\\" class=\\\"alert alert-danger\\\">Key is required</div>\\r\\n            <div *ngIf=\\\"Key.errors.minlength\\\" class=\\\"alert alert-danger\\\">Key must be at least 5 characters</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"checkbox\\\">\\r\\n          <div class=\\\"checkbox\\\">\\r\\n            <mat-checkbox [(ngModel)]=\\\"editedAccountPlatform.IsActive\\\" ngModel name=\\\"IsActive\\\" (change)=\\\"isIndeterminate = false\\\" [indeterminate]=\\\"isIndeterminate\\\"\\r\\n              [disabled]=\\\"isDisabled\\\" [labelPosition]=\\\"labelPosition\\\">IsActive\\r\\n            </mat-checkbox>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group col-md-12\\\">\\r\\n          <button mat-flat-button color=\\\"primary\\\" type=\\\"submit\\\">Update</button>\\r\\n          <button mat-flat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"cancelEdits()\\\">Cancel</button>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- List of PlatformSettings-->\\r\\n<div *ngIf=\\\"platformSettingList\\\" class=\\\"col-md-12\\\">\\r\\n  <h3 style=\\\"text-align: center\\\">Platform Settings</h3>\\r\\n  <table class=\\\"table table-bordered table-striped table-hover\\\">\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th class=\\\"text-center\\\">ID</th>\\r\\n        <th class=\\\"text-center\\\">Key</th>\\r\\n        <th class=\\\"text-center\\\">Value</th>\\r\\n        <th></th>\\r\\n        <th></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let platformset of platformSettings\\\">\\r\\n        <td>{{platformset.ID}}</td>\\r\\n        <td>{{platformset.Key}}</td>\\r\\n        <td>{{platformset.Value}}</td>\\r\\n        <td>\\r\\n          <button mat-flat-button color=\\\"accent\\\" (click)=\\\"showEditPlatformsettingsForm(platformset)\\\">\\r\\n            <i class=\\\"fa fa-edit\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td>\\r\\n          <button mat-flat-button color=\\\"warn\\\" (click)=\\\"removePlatformsettings(platformset)\\\">\\r\\n            <i class=\\\"fa fa-minus\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <button class=\\\"btn btn-success\\\" (click)=\\\"showAddPlatformsettingsForm()\\\">\\r\\n    <i class=\\\"fa fa-plus\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<!-- Create PlatformSettings -->\\r\\n\\r\\n<div *ngIf=\\\"createPlatformSettings\\\" class=\\\"col-md-12\\\">\\r\\n  <h3 style=\\\"text-align:center\\\">Add(Platformsettings)</h3>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form #platfromsettings=\\\"ngForm\\\" (ngSubmit)=\\\"platfromsettings.form.valid && onSubmitPlatfromsettings(platfromsettings)\\\" id=\\\"form\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Key</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"Key\\\" [(ngModel)]=\\\"newplatfromsettingsform.Key\\\" required #Key=\\\"ngModel\\\">\\r\\n            <option *ngFor=\\\"let defaultplatforsetting of platformsettingsdefault\\\">{{defaultplatforsetting.Key}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"platfromsettings.submitted && Key.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Key.errors.required\\\" class=\\\"alert alert-danger\\\">Key is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Value</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newplatfromsettingsform.Value\\\" name=\\\"Value\\\" required #Value=\\\"ngModel\\\"\\r\\n            minlength=\\\"3\\\" />\\r\\n          <div *ngIf=\\\"platfromsettings.submitted && Value.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Value.errors.required\\\" class=\\\"alert alert-danger\\\">Value is required</div>\\r\\n            <div *ngIf=\\\"Value.errors.minlength\\\" class=\\\"alert alert-danger\\\">Value must be at least 3 characters</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group col-md-12\\\">\\r\\n          <button type=\\\"submit\\\" mat-flat-button color=\\\"primary\\\">Save</button>\\r\\n          <button type=\\\"button\\\" mat-flat-button color=\\\"accent\\\" (click)=\\\"cancelNewPlatformSettings()\\\">Cancel</button>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- Edit PlatformSettings -->\\r\\n\\r\\n<div *ngIf=\\\"editPlatformSettings\\\" class=\\\"col-md-12\\\">\\r\\n  <h3 style=\\\"text-align:center\\\">Edit(Platformsettings)</h3>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form #editedPlatformSettingsForm=\\\"ngForm\\\" (ngSubmit)=\\\"editedPlatformSettingsForm.form.valid && onSubmitUpdatePlatfromsettings(editedPlatformSettingsForm)\\\"\\r\\n        id=\\\"form\\\">\\r\\n        <div class=\\\"form-group\\\" style=\\\"display:none\\\">\\r\\n          <input ngModel class=\\\"form-control\\\" [(ngModel)]=\\\"editedPlatformSettings.ID\\\" name=\\\"ID\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Key</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"Key\\\" [(ngModel)]=\\\"editedPlatformSettings.Key\\\" required #Key=\\\"ngModel\\\">\\r\\n            <option *ngFor=\\\"let defaultplatforsetting of platformsettingsdefault\\\">{{defaultplatforsetting.Key}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"editedPlatformSettingsForm.submitted && Key.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Key.errors.required\\\" class=\\\"alert alert-danger\\\">Key is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Value</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"editedPlatformSettings.Value\\\" name=\\\"Value\\\" required #Value=\\\"ngModel\\\"\\r\\n            minlength=\\\"3\\\" />\\r\\n          <div *ngIf=\\\"editedPlatformSettingsForm.submitted && Value.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Value.errors.required\\\" class=\\\"alert alert-danger\\\">Value is required</div>\\r\\n            <div *ngIf=\\\"Value.errors.minlength\\\" class=\\\"alert alert-danger\\\">Value must be at least 3 characters</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group col-md-12\\\">\\r\\n          <button type=\\\"submit\\\" mat-flat-button color=\\\"primary\\\">Save</button>\\r\\n          <button type=\\\"button\\\" mat-flat-button color=\\\"accent\\\" (click)=\\\"cancelNewPlatformSettings()\\\">Cancel</button>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- List of IntegrationFilters-->\\r\\n\\r\\n<div *ngIf=\\\"IntegrationFilterList\\\" class=\\\"col-md-12\\\">\\r\\n  <h3 style=\\\"text-align: center\\\">Integration Filters</h3>\\r\\n  <table class=\\\"table table-bordered table-striped table-hover\\\">\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th class=\\\"text-center\\\">ID</th>\\r\\n        <th class=\\\"text-center\\\">Key</th>\\r\\n        <th class=\\\"text-center\\\">Value</th>\\r\\n        <th class=\\\"text-center\\\">FilterType</th>\\r\\n        <th class=\\\"text-center\\\">FilterCondition</th>\\r\\n        <th class=\\\"text-center\\\">AccountPlatformID</th>\\r\\n        <th class=\\\"text-center\\\">Result</th>\\r\\n        <th></th>\\r\\n        <th></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let integrationfilter of integrationFilters\\\">\\r\\n        <td>{{integrationfilter.ID}}</td>\\r\\n        <td>{{integrationfilter.key}}</td>\\r\\n        <td>{{integrationfilter.Value}}</td>\\r\\n        <td>{{integrationfilter.FilterType}}</td>\\r\\n        <td>{{integrationfilter.FilterCondition}}</td>\\r\\n        <td>{{integrationfilter.AccountPlatformID}}</td>\\r\\n        <td>{{integrationfilter.Result}}</td>\\r\\n        <td>\\r\\n          <button mat-flat-button color=\\\"accent\\\" (click)=\\\"showEditIntegrationFilters(integrationfilter)\\\">\\r\\n            <i class=\\\"fa fa-edit\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td>\\r\\n          <button mat-flat-button color=\\\"warn\\\" (click)=\\\"removeIntegrationFilters(integrationfilter)\\\">\\r\\n            <i class=\\\"fa fa-minus\\\"></i>\\r\\n          </button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"showAddIntegrationFiltersForm()\\\">\\r\\n    <i class=\\\"fa fa-plus\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<!-- Create IntegrationFilters -->\\r\\n<div *ngIf=\\\"createIntegrationFilters\\\" class=\\\"col-md-12\\\">\\r\\n  <h4 style=\\\"text-align:center;\\\">Add(Integrationfilters)</h4>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form #integrationFilters=\\\"ngForm\\\" (ngSubmit)=\\\"integrationFilters.form.valid &&  onSubmitIntegrationFilters(integrationFilters)\\\"\\r\\n        id=\\\"form\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Key</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"key\\\" [(ngModel)]=\\\"newIntegrationFiltersform.key\\\" required #key=\\\"ngModel\\\">\\r\\n            <option *ngFor=\\\"let integrationFilter of integrationFiltersdefault\\\">{{integrationFilter.Value}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"integrationFilters.submitted && key.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"key.errors.required\\\" class=\\\"alert alert-danger\\\">Key is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Value</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newIntegrationFiltersform.Key\\\" name=\\\"Value\\\" required #Value=\\\"ngModel\\\"\\r\\n          />\\r\\n          <div *ngIf=\\\"integrationFilters.submitted && Value.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Value.errors.required\\\" class=\\\"alert alert-danger\\\">Value is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">FilterCondition</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"FilterCondition\\\" [(ngModel)]=\\\"newIntegrationFiltersform.FilterCondition\\\" required\\r\\n            #FilterCondition=\\\"ngModel\\\">\\r\\n            <option *ngFor=\\\"let filtercondition of filterConditions\\\">{{filtercondition.Value}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"integrationFilters.submitted && FilterCondition.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"FilterCondition.errors.required\\\" class=\\\"alert alert-danger\\\">FilterCondition is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">FilterType</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"FilterType\\\" [(ngModel)]=\\\"newIntegrationFiltersform.FilterType\\\" required #FilterType=\\\"ngModel\\\">\\r\\n            <option *ngFor=\\\"let filtertype of filterTypes\\\">{{filtertype.Value}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"integrationFilters.submitted && FilterType.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"FilterType.errors.required\\\" class=\\\"alert alert-danger\\\">FilterType is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Result</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newIntegrationFiltersform.Result\\\" name=\\\"Result\\\" required #Result=\\\"ngModel\\\"\\r\\n          />\\r\\n          <div *ngIf=\\\"integrationFilters.submitted && Result.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Result.errors.required\\\" class=\\\"alert alert-danger\\\">Result is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group col-md-12\\\">\\r\\n          <button type=\\\"submit\\\" mat-flat-button color=\\\"primary\\\">Save</button>\\r\\n          <button type=\\\"button\\\" mat-flat-button color=\\\"accent\\\" (click)=\\\"cancelIntegrationFilters()\\\">Cancel</button>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- Edit IntegrationFilters -->\\r\\n<div *ngIf=\\\"editIntegrationFilters\\\" class=\\\"md-col-12\\\">\\r\\n  <h3 style=\\\"text-align: center\\\">Edit (IntegrationFilters)</h3>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form #editIntegrationFilters=\\\"ngForm\\\" (ngSubmit)=\\\"editIntegrationFilters.form.valid && onSubmitUpdateIntegrationFilters(editIntegrationFilters)\\\"\\r\\n        id=\\\"form\\\">\\r\\n        <div class=\\\"form-group\\\" style=\\\"display:none\\\">\\r\\n            <input ngModel class=\\\"form-control\\\" [(ngModel)]=\\\"editedIntegrationFilters.ID\\\" name=\\\"ID\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\" style=\\\"display:none\\\">\\r\\n            <input ngModel class=\\\"form-control\\\" [(ngModel)]=\\\"editedIntegrationFilters.AccountPlatformID\\\" name=\\\"AccountPlatformID\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Key</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"key\\\" [(ngModel)]=\\\"editedIntegrationFilters.key\\\" required #key=\\\"ngModel\\\">\\r\\n            <option *ngFor=\\\"let defaultIntegrationFilters of integrationFiltersdefault\\\">{{defaultIntegrationFilters.Value}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"editIntegrationFilters.submitted && key.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"key.errors.required\\\" class=\\\"alert alert-danger\\\">Key is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Value</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"editedIntegrationFilters.Value\\\" name=\\\"Value\\\" required #Value=\\\"ngModel\\\"\\r\\n          />\\r\\n          <div *ngIf=\\\"editIntegrationFilters.submitted && Value.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Value.errors.required\\\" class=\\\"alert alert-danger\\\">Value is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">FilterType</label>\\r\\n          <select ngModel class=\\\"form-control\\\" name=\\\"FilterType\\\" [(ngModel)]=\\\"editedIntegrationFilters.FilterType\\\" required #FilterType=\\\"ngModel\\\">\\r\\n            <option *ngFor=\\\"let defaultFilterTypes of filterTypes\\\">{{defaultFilterTypes.Value}}</option>\\r\\n          </select>\\r\\n          <div *ngIf=\\\"editIntegrationFilters.submitted && FilterType.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"FilterType.errors.required\\\" class=\\\"alert alert-danger\\\">FilterType is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label class=\\\"col-md-4\\\">Filter Condition</label>\\r\\n            <select ngModel class=\\\"form-control\\\" name=\\\"FilterCondition\\\" [(ngModel)]=\\\"editedIntegrationFilters.FilterCondition\\\" required\\r\\n              #FilterCondition=\\\"ngModel\\\">\\r\\n              <option *ngFor=\\\"let defaultFilterConditions of filterConditions\\\">{{defaultFilterConditions.Value}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"editIntegrationFilters.submitted && FilterCondition.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"FilterCondition.errors.required\\\" class=\\\"alert alert-danger\\\">FilterCondition is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label class=\\\"col-md-4\\\">Result</label>\\r\\n          <input ngModel type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"editedIntegrationFilters.Result\\\" name=\\\"Result\\\" required #Result=\\\"ngModel\\\"\\r\\n          />\\r\\n          <div *ngIf=\\\"editIntegrationFilters.submitted && Result.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"Result.errors.required\\\" class=\\\"alert alert-danger\\\">Result is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group clo-md-12\\\">\\r\\n          <button type=\\\"submit\\\" mat-flat-button color=\\\"primary\\\">Save</button>\\r\\n          <button type=\\\"button\\\" mat-flat-button color=\\\"accent\\\" (click)=\\\"cancelEditIntegrationFilters()\\\">Cancel</button>\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { AccountPlatformService } from './accountplatform.service';\r\nimport { AccountPlatform } from '../../core/data/AccountPlatform';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormGroup, FormControl, AbstractControl, FormBuilder, Validators, NgForm } from '@angular/forms';\r\nimport { Platform } from '../../core/data/Platform';\r\nimport { Component, OnInit, ViewChild, DoCheck } from '@angular/core';\r\nimport { clone } from 'lodash';\r\nimport { Services } from '../../core/commonservices/services';\r\nimport { Plugin } from '../../core/data/Plugin';\r\nimport { MyGlobal } from '../../core/data/global';\r\nimport { Platformsettings } from '../../core/data/PlatformSettings';\r\nimport { PlatformsettingsService } from '../platformsetting/platformsettings.service';\r\nimport { IntegrationFilterService } from '../integrationfilters/integrationfilter.service';\r\nimport { IntegrationFilter } from '../../core/data/integrationfilter';\r\nimport { FilterCondition } from '../../core/data/FilterCondition';\r\nimport { FilterType } from '../../core/data/FilterType';\r\nimport { Account } from '../../core/data/Acount';\r\n\r\n\r\n\r\n@Component({\r\n  templateUrl: './accountplatform.component.html',\r\n  selector: 'widget-accountplatform',\r\n  providers: [\r\n    AccountPlatformService,\r\n    AccountPlatform,\r\n    Services,\r\n    MyGlobal,\r\n    PlatformsettingsService,\r\n    Platformsettings,\r\n    IntegrationFilterService,\r\n    IntegrationFilter,\r\n  ]\r\n})\r\nexport class AccountPlatformWidgetComponent implements OnInit, DoCheck {\r\n  //global varibale\r\n  public form: FormGroup;\r\n  public submitted: boolean = false;\r\n  platforms: Platform[];\r\n  plugins: Plugin[];\r\n  filterConditions: FilterCondition[];\r\n  filterTypes: FilterType[];\r\n  returnUrl: string;\r\n  message: string;\r\n  globalAccountPlatfromID: number;\r\n\r\n  //Accountplatforms variable\r\n  accountplatforms: AccountPlatform[]\r\n  accounPlatformForm: boolean = false;\r\n  editAcountPlatformForm: boolean = false;\r\n  editedAccountPlatform: any = {};\r\n  newAccountPlatform: any = {};\r\n\r\n  //Platformsettings variable\r\n  platformSettings: Platformsettings[];\r\n  platformsettingsdefault: Platformsettings[];\r\n  createPlatformSettings: boolean = false;\r\n  platformSettingList: boolean = false;\r\n  editPlatformSettings: boolean = false;\r\n  editedPlatformSettings: any = {};\r\n  newplatfromsettingsform: any = {};\r\n\r\n  //IntegrationFilters variable\r\n  integrationFilters: IntegrationFilter[];\r\n  integrationFiltersdefault: IntegrationFilter[];\r\n  createIntegrationFilters: boolean = false;\r\n  IntegrationFilterList: boolean = false;\r\n  editIntegrationFilters: boolean = false;\r\n  editedIntegrationFilters: any = {};\r\n  newIntegrationFiltersform: any = {};\r\n\r\n  constructor(\r\n    private accountPlatformService: AccountPlatformService,\r\n    private platformSettingService: PlatformsettingsService,\r\n    private integrationFilterService: IntegrationFilterService,\r\n    private platformSetting: Platformsettings,\r\n    private integrationFilter: IntegrationFilter,\r\n    private services: Services,\r\n    private accountPlatform: AccountPlatform,\r\n    private router: Router,\r\n    private accountIdForToken: MyGlobal,\r\n    private actvatedRoute: ActivatedRoute) {\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.getAllAccountPlatforms();\r\n    this.getAllFilterType();\r\n    this.getAllFilterCondition();\r\n    this.getAllPlatforms();\r\n    this.getAllPlugins();\r\n  }\r\n\r\n  ngDoCheck() {\r\n  }\r\n\r\n  // AccountPlatform methods\r\n  public onSubmit(form: NgForm): void {\r\n    this.accountPlatform.AccountID = parseInt(localStorage.getItem(\"accountID\"));\r\n    this.accountPlatform.PlatformID = form.value.PlatformID;\r\n    this.accountPlatform.PluginID = form.value.PluginID;\r\n    this.accountPlatform.Type = form.value.Type;\r\n    this.accountPlatform.Key = form.value.Key;\r\n    if (form.value.IsActive === undefined) {\r\n      this.accountPlatform.IsActive = false;\r\n    }\r\n    else {\r\n      this.accountPlatform.IsActive = form.value.IsActive;\r\n    }\r\n    this.accountPlatformService.createAccountPlatform(this.accountPlatform).subscribe(t => {\r\n      if (t) {\r\n        this.accounPlatformForm = false;\r\n        this.getAllAccountPlatforms();\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    })\r\n    this.submitted = true;\r\n  }\r\n\r\n  public onSubmitUpdate(form: NgForm): void {\r\n    this.accountPlatform.ID = form.value.ID;\r\n    this.accountPlatform.AccountID = 1;\r\n    this.accountPlatform.PlatformID = form.value.PlatformID;\r\n    this.accountPlatform.PluginID = form.value.PluginID;\r\n    this.accountPlatform.Type = form.value.Type;\r\n    this.accountPlatform.Key = form.value.Key;\r\n    this.accountPlatform.IsActive = form.value.IsActive;\r\n    this.accountPlatformService.updateAccountPlatform(this.accountPlatform).subscribe(t => {\r\n      if (t) {\r\n        this.accounPlatformForm = false;\r\n        this.getAllAccountPlatforms();\r\n        this.editAcountPlatformForm = false;\r\n        this.editedAccountPlatform = {};\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    })\r\n    this.submitted = true;\r\n  }\r\n\r\n  showEditAccountPlatformForm(accountPlatform: AccountPlatform) {\r\n    if (!accountPlatform) {\r\n      this.accounPlatformForm = false;\r\n      return;\r\n    }\r\n    this.editAcountPlatformForm = true;\r\n    this.editedAccountPlatform = clone(accountPlatform);\r\n    this.accounPlatformForm = false;\r\n  }\r\n\r\n  showAddAccountPlatformForm() {\r\n    // resets form if edited accountPlatform\r\n    if (this.accountplatforms.length) {\r\n      this.newAccountPlatform = {};\r\n    }\r\n    this.accounPlatformForm = true;\r\n    this.editAcountPlatformForm = false;\r\n    this.platformSettingList = false;\r\n  }\r\n\r\n\r\n  removeAccountPlatform(accountPlatform: AccountPlatform) {\r\n    this.accountPlatformService.deleteAccountPlatformById(accountPlatform).subscribe(t => {\r\n      if (t) {\r\n        this.accounPlatformForm = false;\r\n        this.editAcountPlatformForm=false;\r\n        this.getAllAccountPlatforms();\r\n        this.IntegrationFilterList = false;\r\n        this.platformSettingList = false;\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    })\r\n    this.submitted = true;\r\n  }\r\n\r\n  getAllAccountPlatforms() {\r\n    this.accountPlatformService.getAllAccountPlatform().subscribe(p => {\r\n      if (p.length === 42) {\r\n        this.accountplatforms = [];\r\n      }\r\n      else {\r\n        this.accountplatforms = p;\r\n      }\r\n    }\r\n    );\r\n  }\r\n\r\n  cancelNewAccountPlatform() {\r\n    this.newAccountPlatform = {};\r\n    this.accounPlatformForm = false;\r\n  }\r\n\r\n  cancelEdits() {\r\n    this.editedAccountPlatform = {};\r\n    this.editAcountPlatformForm = false;\r\n  }\r\n\r\n\r\n  // Platformsettings methods\r\n\r\n  public onSubmitPlatfromsettings(form: NgForm): void {\r\n    this.platformSetting.AccountPlatformID = this.globalAccountPlatfromID;\r\n    this.platformSetting.Value = form.value.Value;\r\n    this.platformSetting.Key = form.value.Key;\r\n    this.platformSettingService.createPlatformsettings(this.platformSetting).subscribe(t => {\r\n      if (t) {\r\n        this.createPlatformSettings = false;\r\n        this.getAllPlatfromSettingsByAccountPlatformID(this.globalAccountPlatfromID);\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    })\r\n    this.submitted = true;\r\n  }\r\n\r\n  public onSubmitUpdatePlatfromsettings(form: NgForm): void {\r\n    this.platformSetting.AccountPlatformID = this.globalAccountPlatfromID;\r\n    this.platformSetting.ID = form.value.ID;\r\n    this.platformSetting.Value = form.value.Value;\r\n    this.platformSetting.Key = form.value.Key;\r\n    this.platformSettingService.updatePlatformsettings(this.platformSetting).subscribe(t => {\r\n      if (t) {\r\n        this.editPlatformSettings = false;\r\n        this.getAllPlatfromSettingsByAccountPlatformID(this.globalAccountPlatfromID);\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    }, error => {\r\n      this.message = \"Please try again\"\r\n    }\r\n    )\r\n    this.submitted = true;\r\n  }\r\n\r\n\r\n  showAddPlatformsettingsForm() {\r\n    // resets form if edited accountPlatform\r\n    // if (this.platformSettings.length==undefined) {\r\n    this.newplatfromsettingsform = {};\r\n    // }\r\n    this.createPlatformSettings = true;\r\n    this.editPlatformSettings = false;\r\n\r\n  }\r\n\r\n  showEditPlatformsettingsForm(editplatformsettings: Platformsettings) {\r\n    if (!editplatformsettings) {\r\n      this.createPlatformSettings = false;\r\n      return;\r\n    }\r\n    this.editPlatformSettings = true;\r\n    this.editedPlatformSettings = clone(editplatformsettings);\r\n    this.createPlatformSettings = false;\r\n  }\r\n  showEditIntegrationFilters(editIntegrationFilters: IntegrationFilter) {\r\n    if (!editIntegrationFilters) {\r\n      this.createIntegrationFilters = false;\r\n      return;\r\n    }\r\n    this.editIntegrationFilters = true;\r\n    this.editedIntegrationFilters = clone(editIntegrationFilters)\r\n    this.createIntegrationFilters = false;\r\n  }\r\n\r\n  getAllPlatfromSettingsByAccountPlatformID(accountplatformID: number) {\r\n    this.platformSettingService.getAllPlatformsettings(accountplatformID).subscribe(p => {\r\n      if (p.length !== 42) {\r\n        this.platformSettingList = true;\r\n        this.platformSettings = p;\r\n      }\r\n      else {\r\n        this.platformSettingList = true;\r\n        this.platformSettings = [];\r\n      }\r\n    })\r\n  }\r\n\r\n  getPlatformsettingByDefault(accountplatform: AccountPlatform) {\r\n    this.platformSettingService.getPlatformsettingByDefault(accountplatform.ID).subscribe(p => {\r\n      this.platformSettingList = true;\r\n      this.platformsettingsdefault = p;\r\n    })\r\n  }\r\n\r\n  removePlatformsettings(platformsetting: Platformsettings) {\r\n    console.log(this.accountPlatform);\r\n    this.platformSettingService.deletePlatformsettingsById(platformsetting).subscribe(t => {\r\n      if (t) {\r\n        this.editAcountPlatformForm=false;\r\n        this.getAllPlatfromSettingsByAccountPlatformID(this.globalAccountPlatfromID);\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    })\r\n    this.submitted = true;\r\n  }\r\n\r\n  //IntegrationFilters Method\r\n  public onSubmitIntegrationFilters(form: NgForm): void {\r\n    this.integrationFilter.AccountPlatformID = this.globalAccountPlatfromID;\r\n    this.integrationFilter.Value = form.value.Value;\r\n    this.integrationFilter.key = form.value.key;\r\n    this.integrationFilter.FilterCondition = form.value.FilterCondition;\r\n    this.integrationFilter.FilterType = form.value.FilterType;\r\n    this.integrationFilter.Result = form.value.Result;\r\n    this.integrationFilterService.createIntegrationFilters(this.integrationFilter).subscribe(t => {\r\n      if (t) {\r\n        this.createIntegrationFilters = false;\r\n        this.getAllIntegrationFiltersByAccountPlatformID(this.globalAccountPlatfromID);\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    })\r\n    this.submitted = true;\r\n  }\r\n\r\n  public onSubmitUpdateIntegrationFilters(form: NgForm): void {\r\n    this.integrationFilter.AccountPlatformID = form.value.AccountPlatformID;\r\n    this.integrationFilter.ID = form.value.ID;\r\n    this.integrationFilter.key = form.value.key;\r\n    this.integrationFilter.FilterType = form.value.FilterType;\r\n    this.integrationFilter.Value = form.value.Value;\r\n    this.integrationFilter.Result = form.value.Result;\r\n    this.integrationFilter.FilterCondition = form.value.FilterCondition;\r\n    this.integrationFilterService.updateIntegrationFilters(this.integrationFilter).subscribe(t => {\r\n      if (t) {\r\n        this.editIntegrationFilters = false;\r\n        this.getAllIntegrationFiltersByAccountPlatformID(this.globalAccountPlatfromID);\r\n      }\r\n      else {\r\n        this.message = \"Please try again\";\r\n      }\r\n    }, error => {\r\n      this.message = \"Please try again\";\r\n    })\r\n  }\r\n\r\n  showAddIntegrationFiltersForm() {\r\n    if (this.integrationFilters.length) {\r\n      this.newIntegrationFiltersform = {};\r\n    }\r\n    this.createIntegrationFilters = true;\r\n    this.editIntegrationFilters = false;\r\n  }\r\n\r\n  getAllIntegrationFiltersByAccountPlatformID(accountplatformID: number) {\r\n    this.integrationFilterService.getAllIntegrationFilters(accountplatformID).subscribe(p => {\r\n      console.log(p.length);\r\n      if (p.length == 52) {\r\n        this.IntegrationFilterList = true;\r\n        this.integrationFilters = [];\r\n      } else {\r\n        this.IntegrationFilterList = true;\r\n        this.integrationFilters = p;\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getIntegrationFiltersByDefault(accountplatform: AccountPlatform) {\r\n    this.integrationFilterService.getIntegrationFiltersByDefault(accountplatform.ID).subscribe(p => {\r\n      this.IntegrationFilterList = true;\r\n      this.integrationFiltersdefault = p;\r\n      console.log(this.integrationFiltersdefault);\r\n    });\r\n\r\n  }\r\n\r\n  removeIntegrationFilters(integrationfilter: IntegrationFilter) {\r\n    console.log(this.globalAccountPlatfromID);\r\n    this.integrationFilterService.deleteIntegrationFiltersById(integrationfilter).subscribe(t => {\r\n      if (t) {\r\n        this.editIntegrationFilters=false;\r\n        this.getAllIntegrationFiltersByAccountPlatformID(this.globalAccountPlatfromID);\r\n      }\r\n      else {\r\n        this.message = \"Please try again!!\";\r\n      }\r\n    })\r\n    this.submitted = true;\r\n  }\r\n\r\n  getAllFilterCondition() {\r\n    this.services.getFilterCondition().subscribe(p => {\r\n      this.filterConditions = p;\r\n    });\r\n  }\r\n\r\n  getAllFilterType() {\r\n    this.services.getFilterType().subscribe(p => {\r\n      this.filterTypes = p;\r\n    });\r\n  }\r\n\r\n  //Common methods\r\n\r\n\r\n  getAllPlatforms() {\r\n    this.services.getAllPlatform().subscribe(p => {\r\n      this.platforms = p;\r\n    }\r\n    );\r\n  }\r\n\r\n  getAllPlugins() {\r\n    this.services.getAllPlugin().subscribe(p => {\r\n      this.plugins = p\r\n    }\r\n    );\r\n  }\r\n\r\n  cancelNewPlatformSettings() {\r\n    this.newplatfromsettingsform = {};\r\n    this.createPlatformSettings = false;\r\n    this.editPlatformSettings = false;\r\n  }\r\n\r\n  cancelIntegrationFilters() {\r\n    this.newIntegrationFiltersform = {};\r\n    this.createIntegrationFilters = false;\r\n  }\r\n\r\n  cancelEditIntegrationFilters() {\r\n    this.editedIntegrationFilters = {};\r\n    this.editIntegrationFilters = false;\r\n    this.createIntegrationFilters = false;\r\n  }\r\n\r\n  goPlatformSettings(accountplatform: AccountPlatform) {\r\n    this.getAllPlatfromSettingsByAccountPlatformID(accountplatform.ID);\r\n    this.getPlatformsettingByDefault(accountplatform);\r\n    this.globalAccountPlatfromID = accountplatform.ID;\r\n  }\r\n\r\n  goIntegrationFilters(accountplatform: AccountPlatform) {\r\n    this.getAllIntegrationFiltersByAccountPlatformID(accountplatform.ID);\r\n    this.getIntegrationFiltersByDefault(accountplatform);\r\n    this.globalAccountPlatfromID = accountplatform.ID;\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { Http, Response, RequestOptions, Headers } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Router } from '@angular/router';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\nimport { AccountPlatform } from '../../core/data/AccountPlatform';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class AccountPlatformService {\r\n\r\n    myAppUrl: string = \"\";\r\n    constructor(private _http: Http, @Inject('baseUrl') baseUrl: string) {\r\n        this.myAppUrl = baseUrl;\r\n    }\r\n\r\n    private headers = new Headers(\r\n        {\r\n            'Content-Type': 'application/json',\r\n            'X-MKC-Auth': 'test'\r\n        }\r\n    );\r\n\r\n    //get all accountplatform\r\n    getAllAccountPlatform(): Observable<AccountPlatform[]> {\r\n        let url: string = this.myAppUrl + \"accountplatform/getall\";\r\n        console.log(url);\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.get(url, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //Create accountplatform\r\n    createAccountPlatform(accounPlatform: AccountPlatform): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"accountplatform/create\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.post(url, accounPlatform, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //Update AccountPlatform\r\n    updateAccountPlatform(accounPlatform: AccountPlatform): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"accountplatform/update\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.post(url, accounPlatform, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //Delete AccountPlatform\t\r\n    deleteAccountPlatformById(accounPlatform: AccountPlatform): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"accountplatform/\" + accounPlatform.ID + \"/delete\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.delete(url, { headers: this.headers })\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //get all platformsettings\r\n    getDefaultPlatformsettings(AccountPlatformID: number): Observable<string[]> {\r\n        let url: string = this.myAppUrl + \"platformsettings/\" + AccountPlatformID + \"/getdefault\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.get(url, { headers: this.headers })\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    extractData(res: Response) {\r\n        let body = res.json();\r\n        return body;\r\n    }\r\n\r\n    errorHandler(error: Response) {\r\n        console.log(error);\r\n        return Observable.throw(error);\r\n    }\r\n\r\n}","import { Injectable, Inject } from \"@angular/core\";\r\nimport { Http, Headers, RequestOptions } from \"@angular/http\";\r\nimport { IntegrationFilter } from \"../../core/data/integrationfilter\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class IntegrationFilterService {\r\n    headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n        'X-MKC-Auth': 'test',\r\n    })\r\n    myAppUrl: string = \"\";\r\n    constructor(private _http: Http, @Inject('baseUrl') baseUrl: string) {\r\n        this.myAppUrl = baseUrl;\r\n    }\r\n\r\n\r\n    //get all integrationfilters\r\n    getAllIntegrationFilters(accountPlatformID: number): Observable<IntegrationFilter[]> {\r\n        let url: string = this.myAppUrl + \"integrationfilter/\" + accountPlatformID + \"/getall\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.get(url, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //get all default integrationfilers\r\n    getIntegrationFiltersByDefault(accountPlatformID: number): Observable<IntegrationFilter[]> {\r\n        let url: string = this.myAppUrl + \"integrationfilter/\" + accountPlatformID + \"/getdefaultkey\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.get(url, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n\r\n    }\r\n\r\n    //Create platformsettings\r\n    createIntegrationFilters(integrationfilers: IntegrationFilter): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"integrationfilter/create\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.post(url, integrationfilers, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //Update IntegrationFilters\r\n    updateIntegrationFilters(integrationfilters: IntegrationFilter): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"integrationfilter/update\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.post(url, integrationfilters, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    //Delete platformsettings\t\r\n    deleteIntegrationFiltersById(integrationfilters: IntegrationFilter): Observable<boolean> {\r\n        let url: string = this.myAppUrl + \"integrationfilter/\" + integrationfilters.ID + \"/delete\";\r\n        var requestOptions = new RequestOptions({ headers: this.headers });\r\n        return this._http.delete(url, requestOptions)\r\n            .map(res => res.json())\r\n            .map(res => {\r\n                if (res) {\r\n                }\r\n                return res;\r\n            })\r\n            .catch(this.errorHandler);\r\n    }\r\n\r\n    extractData(res: Response) {\r\n        let body = res.json();\r\n        return body;\r\n    }\r\n\r\n    errorHandler(error: Response) {\r\n        console.log(error);\r\n        return Observable.throw(error);\r\n    }\r\n\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\n\r\nimport {Ng2ListViewCRUD} from \"ng2-listview-crud\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport { Ng2Timeline } from 'ng2-timeline'\r\nimport {Ng2NewsList} from \"../../components/ng2-newslist/ng2newslist.module\";\r\nimport {Ng2SmartTableModule} from \"ng2-smart-table\";\r\nimport { AccountPlatformWidgetComponent } from '../accountplatform/accountplatform.component';\r\nimport { AccountPlatformWidgetRoutingModule } from '../accountplatform/accountplatform-routing';\r\nimport {      \r\n  MatButtonModule,      \r\n  MatMenuModule,      \r\n  MatToolbarModule,      \r\n  MatIconModule,      \r\n  MatCardModule,      \r\n  MatSidenavModule,\r\n  MatListModule,\r\n  MatCheckboxModule,\r\n  MatFormFieldModule,      \r\n  MatInputModule,      \r\n  MatDatepickerModule,         \r\n  MatNativeDateModule,      \r\n  MatRadioModule,      \r\n  MatSelectModule,      \r\n  MatOptionModule,      \r\n  MatSlideToggleModule   \r\n} from '@angular/material';\r\n\r\n\r\n@NgModule({\r\n imports:[\r\n  FormsModule,ReactiveFormsModule,\r\n  AccountPlatformWidgetRoutingModule,\r\n  CommonModule,Ng2SmartTableModule,\r\n  Ng2ListViewCRUD,\r\n  Ng2Timeline,Ng2NewsList,\r\n  MatButtonModule,      \r\n  MatMenuModule,      \r\n  MatToolbarModule,      \r\n  MatIconModule,      \r\n  MatCardModule,          \r\n  MatFormFieldModule,      \r\n  MatInputModule,      \r\n  MatDatepickerModule,      \r\n  MatNativeDateModule,      \r\n  MatRadioModule,      \r\n  MatSelectModule,      \r\n  MatOptionModule,      \r\n  MatSlideToggleModule,\r\n  MatButtonModule,\r\n  MatSidenavModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatCardModule,\r\n  MatCheckboxModule\r\n ],\r\n declarations:[AccountPlatformWidgetComponent],\r\n providers:[]\r\n})\r\nexport class AccountPlatformWidgetModule{}"],"sourceRoot":""}